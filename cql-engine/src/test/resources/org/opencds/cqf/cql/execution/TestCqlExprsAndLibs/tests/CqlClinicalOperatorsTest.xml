<?xml version="1.0" encoding="utf-8"?>
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://hl7.org/fhirpath/tests" xsi:schemaLocation="http://hl7.org/fhirpath/tests ../../testSchema/testSchema.xsd">
	<!-- TODO: This whole test set needs an overhaul.  There are gaps.  Some tests fail.  And so on. -->
	<group name="Age">
		<test name="Age">
			<expression>
				/*define PatientExpression: Patient { Name: 'Patrick', DOB: @2014-01-01 }
				context Patient
				define AgeYears: Patient.AgeInYears()*/
			</expression>
		</test>
	</group>
	<group name="AgeAt">
	</group>
	<group name="CalculateAge">
		<test name="CalculateAgeYears">
			<expression>
				define CalculateAgeYears: Equivalent(CalculateAgeInYears(DateTime(2000, 1, 1)), 18)
			</expression>
		</test>
		<test name="CalculateAgeMonths">
			<expression>
				define CalculateAgeMonths: Equivalent(CalculateAgeInMonths(DateTime(2000, 1, 1)), 218)
			</expression>
		</test>
		<test name="CalculateAgeDays">
			<expression>
				define CalculateAgeDays: Equivalent(CalculateAgeInDays(DateTime(2000, 1, 1)), 6637)
			</expression>
		</test>
		<test name="CalculateAgeHours">
			<expression>
				define CalculateAgeHours: Equivalent(CalculateAgeInHours(DateTime(2000, 1, 1, 0)), 159290)
			</expression>
		</test>
		<test name="CalculateAgeMinutes">
			<expression>
				define CalculateAgeMinutes: Equivalent(CalculateAgeInMinutes(DateTime(2000, 1, 1, 0, 0)), 9557420)
			</expression>
		</test>
		<test name="CalculateAgeSeconds">
			<expression>
				define CalculateAgeSeconds: Equivalent(CalculateAgeInSeconds(DateTime(2000, 1, 1, 0, 0, 0)), 573445215)
			</expression>
		</test>
		<test name="CalculateAgeUncertain">
			<expression>
				define CalculateAgeUncertain: Equivalent(CalculateAgeInMonths(DateTime(2000)), Interval [ 207, 218 ])
			</expression>
		</test>
	</group>
	<group name="CalculateAgeAt">
		<test name="CalculateAgeAtYears">
			<expression>
				define CalculateAgeAtYears: Equivalent(CalculateAgeInYearsAt(DateTime(2000, 1, 1), DateTime(2017, 1, 1)), 17)
			</expression>
		</test>
		<test name="CalculateAgeAtMonths">
			<expression>
				define CalculateAgeAtMonths: Equivalent(CalculateAgeInMonthsAt(DateTime(2000, 1, 1), DateTime(2016, 6, 14)), 197)
			</expression>
		</test>
		<test name="CalculateAgeAtDays">
			<expression>
				define CalculateAgeAtDays: Equivalent(CalculateAgeInDaysAt(DateTime(2000, 1, 1), DateTime(2016, 7, 13)), 6038)
			</expression>
		</test>
		<test name="CalculateAgeAtHours">
			<expression>
				define CalculateAgeAtHours: Equivalent(CalculateAgeInHoursAt(DateTime(2000, 1, 1, 0), DateTime(2016, 7, 13, 0)), 144912)
			</expression>
		</test>
		<test name="CalculateAgeAtMinutes">
			<expression>
				define CalculateAgeAtMinutes: Equivalent(CalculateAgeInMinutesAt(DateTime(2000, 1, 1, 0, 0), DateTime(2016, 7, 13, 0, 0)), 8694720)
			</expression>
		</test>
		<test name="CalculateAgeAtSeconds">
			<expression>
				define CalculateAgeAtSeconds: Equivalent(CalculateAgeInSecondsAt(DateTime(2000, 1, 1, 0, 0, 0), DateTime(2016, 7, 13, 0, 0, 0)), 521683200)
			</expression>
		</test>
		<test name="CalculateAgeAtUncertain">
			<expression>
				define CalculateAgeAtUncertain: Equivalent(CalculateAgeInMonthsAt(DateTime(2000), DateTime(2016, 7, 14)), Interval [ 187, 198 ])
			</expression>
		</test>
	</group>
	<group name="Equal">
		<test name="Equal">
			<expression>
				codesystem "LOINC": 'http://loinc.org'
				define private Code1: Code '8480-6' from "LOINC" display 'Systolic blood pressure'
				define private Code2: Code '8480-5' from "LOINC" display 'Systolic blood pressure'
				define private Concept1: Concept { Code '66071002' from "LOINC", Code 'B18.1' from "LOINC"} display 'Type B viral hepatitis'
				define private Concept2: Concept { Code '66071003' from "LOINC", Code 'B18.1' from "LOINC"} display 'Type B viral hepatitis'
				define CodeEqualTrue: Equivalent(Code1 = Code1, true)
				define CodeEqualFalse: Equivalent(Code1 = Code2, false)
				define ConceptEqualTrue: Equivalent(Concept1 = Concept1, true)
				define ConceptEqualFalse: Equivalent(Concept1 = Concept2, false)
				define CodeEqualNull: Equivalent(Code1 = null, null)
				define ConceptEqualNull: Equivalent(Concept1 = null, null)
			</expression>
		</test>
	</group>
	<group name="Equivalent">
		<test name="Equivalent">
			<expression>
				codesystem "LOINC": 'http://loinc.org'
				define private Code1: Code '8480-6' from "LOINC" display 'Systolic blood pressure'
				define private Code2: Code '8480-5' from "LOINC" display 'Systolic blood pressure'
				define private Concept1: Concept { Code '66071002' from "LOINC", Code 'B18.1' from "LOINC"} display 'Type B viral hepatitis'
				define private Concept2: Concept { Code '66071003' from "LOINC", Code 'B18.1' from "LOINC"} display 'Type B viral hepatitis'
				define CodeEquivalentTrue: Equivalent(Code1 ~ Code1, true)
				define CodeEquivalentFalse: Equivalent(Code1 ~ Code2, false)
				define ConceptEquivalentTrue: Equivalent(Concept1 ~ Concept1, true)
				define ConceptEquivalentFalse: Equivalent(Concept1 ~ Concept2, false)
				define CodeEquivalentNull: Equivalent(Code1 ~ null, false)
				define ConceptEquivalentNull: Equivalent(Concept1 ~ null, false)
			</expression>
		</test>
	</group>
	<group name="Equivalent Part Deux">
		<test name="Equivalent Part Deux">
			<expression>
				// TODO: These throw translator errors
				define Code3: Code null from "LOINC" display 'Systolic blood pressure'
				define Concept3: Concept { Code '66071003' from "LOINC", Code null from "LOINC" } display 'Type B viral hepatitis'
				define CodeEquivalentNullTrue: Equivalent(Code3 ~ Code3, true)
				define CodeEquivalentNullFalse: Equivalent(Code2 ~ Code3, false)
				define ConceptEquivalentNullTrue: Equivalent(Concept3 ~ Concept3, true)
				define ConceptEquivalentNullFalse: Equivalent(Concept2 ~ Concept3, false)
			</expression>
		</test>
	</group>
</tests>
